using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using VulnerabilityExamples.Models;

namespace VulnerabilityExamples.Controllers
{
    public class CsrfSafeController : Controller
    {
        //
        // GET: /CsrfSafe/

        public ActionResult Index()
        {
            return View();
        }

        /// <summary>
        /// Get requests are safe from CSRF attacks IFF they do *not* perform sensitive operations such as modifying data.
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public ActionResult CsrfSafe()
        {
            return View();
        }

        /// <summary>
        /// POST Requests are safe from CSRF attacks IF they are decorated with ValidateAntiForgeryToken AND the site does not have XSS vulnerabilities.
        /// 
        /// I do not yet have a remote site setup that would allow you to see the full attack in operation.  However, you can prove to yourself that without the cookie
        /// the request would fail by deleting the __RequestVerification... cookie and retrying the request.
        /// 
        /// You can prove to  yourself that the request fails without the form POST variable by commenting out @Html.AntiForgeryToken in the View.
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CsrfSafe(CsrfSafeModel model)
        {
            //pretend there are sensitive data modifying operations here ....
            return View();
        }

    }
}
