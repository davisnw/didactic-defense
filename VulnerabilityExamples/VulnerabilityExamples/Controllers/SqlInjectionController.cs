using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Data.SqlClient;
using System.Configuration;
using VulnerabilityExamples.Models;

namespace VulnerabilityExamples.Controllers
{
    public class SqlInjectionController : Controller
    {
        //
        // GET: /SqlInjection/

        public ActionResult Index()
        {
            return View();
        }

        [HttpGet]
        public ActionResult Insecure1()
        {
            return View("LoginPage", new SqlInjectionModel());
        }

        [HttpPost]
        public ActionResult Insecure1(SqlInjectionModel model)
        {
            //example exploit: UserName: ' OR 1=1 --

            string sql = string.Concat("SELECT 1 FROM dbo.[Users] WHERE UserName='", model.UserName, "' AND PasswordNeverStoreLikeThis='", model.Password, "'");

            return ParameterlessLogin(sql);
        }


        //This may be vulnerable to backspacing attacks, but I haven't been able to demonstrate it.  At any rate, it is not a good general purpose solution
        //because sometimes your sql would not be surrounded by quotes, in which case the attacker could just leave off the inital tick: OR 1=1 --
        //[HttpGet]
        //public ActionResult Insecure2()
        //{
        //    return View("LoginPage", new SqlInjectionModel());
        //}

        //[HttpPost]
        //public ActionResult Insecure2(SqlInjectionModel model)
        //{
        //    //example exploit: UserName: + CHAR(8) OR 1=1 --

        //    string username = model.UserName.Replace("'", "''");
        //    string password = model.Password.Replace("'", "''");

        //    string sql = "SELECT 1 FROM dbo.[Users] WHERE UserName='" + username + "' AND PasswordNeverStoreLikeThis='" + password + "'";

        //    return ParameterlessLogin(sql);
        //}

        [HttpGet]
        public ActionResult WildcardInjection()
        {
            return View("LoginPage", new SqlInjectionModel());
        }


        [HttpPost]
        public ActionResult WildcardInjection(SqlInjectionModel model)
        {
            //Example exploit: UserName: %  Password: %

            const string sql = "SELECT 1 FROM dbo.[Users] WHERE UserName LIKE @UserName AND PasswordNeverStoreLikeThis LIKE @Password";

            using (var conn = new SqlConnection(ConfigurationManager.ConnectionStrings["appConnection"].ConnectionString))
            using (var cmd = new SqlCommand(sql, conn))
            {
                conn.Open();

                cmd.Parameters.AddWithValue("@UserName", model.UserName);
                cmd.Parameters.AddWithValue("@Password", model.Password);

                bool isAuthenticated = cmd.ExecuteScalar() != null;

                if (isAuthenticated)
                {
                    return View("LoginSuccess");
                }

                return View("LoginPage", new SqlInjectionModel { Message = "Login failed" });
            }
        }

        private ActionResult ParameterlessLogin(string sql)
        {
            if (IsAuthenticated(sql))
            {
                return View("LoginSuccess");
            }

            return View("LoginPage", new SqlInjectionModel { Message = "Login failed"});
        }

        private static bool IsAuthenticated(string sql)
        {
            using (var conn = new SqlConnection(ConfigurationManager.ConnectionStrings["appConnection"].ConnectionString))
            using (var cmd = new SqlCommand(sql, conn))
            {
                conn.Open();

                return cmd.ExecuteScalar() != null;
            }
        }


    }
}
