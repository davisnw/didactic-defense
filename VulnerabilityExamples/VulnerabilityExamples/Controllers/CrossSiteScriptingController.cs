using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using VulnerabilityExamples.Models;

namespace VulnerabilityExamples.Controllers
{
    public class CrossSiteScriptingController : Controller
    {
        //
        // GET: /CrossSiteScripting/

        /// <summary>
        /// Note that here ASP.NET will throw an exeception rather than allowing the tag to go through.
        /// 
        /// This is an exmple of the default behavior preventing legitimate input.  It can be turned off by modifying the web.config. (if you are encoding properly).
        /// </summary>
        public ActionResult Safe(string input)
        {
            return View(input);
        }

        /// <summary>
        /// Note that here ASP.NET will throw an exeception rather than allowing the tag to go through.
        /// 
        /// That behavior can prevent legitimate input.  It can be turned off by modifying the web.config. (if you are encoding properly).
        /// I'm also not sure that it is 100% reliable detection for XSS, and it certainly doesn't detect other types of attacks, such as Sql Injection. 
        /// “Code and Data Confusion”, and “What is data in one context may be code in another”. "Know your execution context"
        /// </summary>
        public ActionResult Unsafe(string input)
        {
            return View(input);
        }

        /// <summary>
        /// Here you will note that we decorated the model property with [AllowHtml]
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public ActionResult Safe2(CrossSiteScriptingModel model)
        {
            return View(model);
        }

        /// <summary>
        /// Here you will note that we decorated the model property with [AllowHtml]
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public ActionResult Unsafe2(CrossSiteScriptingModel model)
        {
            return View(model);
        }
    }
}
